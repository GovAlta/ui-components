import { GoASpinner, GoAButton } from '@abgov/react-components';
import { action } from '@storybook/addon-actions';
import { useState, useEffect } from 'react';
import { Tabs, Tab, Note, CodeSnippet } from '@abgov/shared/storybook-common';
import { Meta, Story } from '@storybook/addon-docs';

<Meta title="Components/Spinner" component={GoASpinner} />

# Spinner

A skeleton provides visual feedback to users while a content heavy page or element is loading.

[Figma design component](https://www.figma.com/file/3pb2IK8s2QUqWieH79KdN7/Components---DIO-DS?node-id=3799%3A118526)

export const ProgressSpinner = (args) => {
  const [progress, setProgress] = useState(0);
  const updateProgress = () => {
    return setInterval(() => {
      setProgress(progress + 10);
    }, 1000);
  };
  useEffect(() => {
    const handle = updateProgress();
    return () => {
      clearInterval(handle);
    }
  }, [progress, setProgress]);
  return (
    <GoASpinner {...args} type="progress" progress={progress} />
  )
}

export const SizesTemplate = (args) => (
  <div style={{backgroundColor: args.invert ? 'var(--goa-color-primary)' : '', padding: '2rem', display: 'flex', justifyContent: 'center', gap: '1rem', alignItems: 'center'}}>
    <GoASpinner {...args} size="small" />
    <GoASpinner {...args} size="medium" />
    <GoASpinner {...args} size="large" />
    <GoASpinner {...args} size="xlarge" />
  </div>
);

export const TypesTemplate = (args) => (
  <div style={{padding: '2rem', display: 'flex', justifyContent: 'center', gap: '1rem', alignItems: 'center'}}>
    <ProgressSpinner size="large" />
    <GoASpinner size="large" type="infinite" />
  </div>
);

export const ButtonTemplate = (args) => (
  <GoAButton>
    Processing... <GoASpinner size="small" invert />
  </GoAButton>
);

## Sizes

<Story name="Sizes">
  {SizesTemplate.bind({})}
</Story>

<Tabs>
  <Tab label="Web Component" hidden={true}>
    <CodeSnippet lang="html" code={`
      <goa-spinner type="progress" size="small" />
      <goa-spinner type="progress" size="medium" />
      <goa-spinner type="progress" size="large" />
      <goa-spinner type="progress" size="xlarge" />
    `}/>
  </Tab>
  <Tab label="Angular">
    <CodeSnippet lang="html" code={`
      <goa-spinner type="progress" size="small" />
      <goa-spinner type="progress" size="medium" />
      <goa-spinner type="progress" size="large" />
      <goa-spinner type="progress" size="xlarge" />
    `}/>
  </Tab>
  <Tab label="React">
    <CodeSnippet lang="jsx" code={`
      <GoASpinner type="progress" size="small" />
      <GoASpinner type="progress" size="medium" />
      <GoASpinner type="progress" size="large" />
      <GoASpinner type="progress" size="xlarge" />
    `}/>
  </Tab>
</Tabs>

## Inverted

<Story name="Inverted" args={{invert: true}}>
  {SizesTemplate.bind({})}
</Story>

<Tabs>
  <Tab label="Web Component" hidden={true}>
    <CodeSnippet lang="html" code={`
      <goa-spinner type="progress" size="small" invert />
      <goa-spinner type="progress" size="medium" invert />
      <goa-spinner type="progress" size="large" invert />
      <goa-spinner type="progress" size="xlarge" invert />
    `}/>
  </Tab>
  <Tab label="Angular">
    <CodeSnippet lang="html" code={`
      <goa-spinner type="progress" size="small" invert />
      <goa-spinner type="progress" size="medium" invert />
      <goa-spinner type="progress" size="large" invert />
      <goa-spinner type="progress" size="xlarge" invert />
    `}/>
  </Tab>
  <Tab label="React">
    <CodeSnippet lang="jsx" code={`
      <GoASpinner type="progress" size="small" invert={true} />
      <GoASpinner type="progress" size="medium" invert={true} />
      <GoASpinner type="progress" size="large" invert={true} />
      <GoASpinner type="progress" size="xlarge" invert={true} />
    `}/>
  </Tab>
</Tabs>

## Types

<Story name="Types">
  {TypesTemplate.bind({})}
</Story>

<Tabs>
  <Tab label="Web Component" hidden={true}>
    <CodeSnippet lang="html" code={`
      <goa-spinner id="progress" type="progress" size="large" />
      <goa-spinner type="infinite" size="large" />
    `}/>
    <CodeSnippet lang="js" code={`
      const p = document.querySelector('#progress');
      p.setAttribute('progress', someValue);
    `}/>
  </Tab>
  <Tab label="Angular">
    <CodeSnippet lang="html" code={`
      <goa-spinner type="progress" size="large" [progress]="progress" />
      <goa-spinner type="infinite" size="large" />
    `}/>
  </Tab>
  <Tab label="React">
    <CodeSnippet lang="jsx" code={`
      <GoASpinner type="progress" size="large" progress={progress} />
      <GoASpinner type="infinite" size="large" />
    `}/>
  </Tab>
</Tabs>

## Other uses

<Story name="Button">
  {ButtonTemplate.bind({})}
</Story>

<Tabs>
  <Tab label="Web Component" hidden={true}>
    <CodeSnippet lang="html" code={`
      <goa-button>
        Processing... <goa-spinner size="small" invert />
      </goa-button>
    `}/>
  </Tab>
  <Tab label="Angular">
    <CodeSnippet lang="html" code={`
      <goa-button>
        Processing... <goa-spinner size="small" invert />
      </goa-button>
    `}/>
  </Tab>
  <Tab label="React">
    <CodeSnippet lang="jsx" code={`
      <GoAButton>
        Processing... <GoASpinner size="small" invert />
      </GoAButton>
    `}/>
  </Tab>
</Tabs>


<Note type="best-practices">
  Progress indicators should be applied to all instances of a process (such as loading) in a consistent format.
</Note>
