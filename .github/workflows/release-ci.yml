# This is a basic workflow to help you get started with Actions

name: Release CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches:
      - main
      - beta

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v2
        with:
          node-version: "12"
      - run: npm ci
      - id: get_branch_name
        run: echo ::set-output name=short_ref::${GITHUB_REF#refs/*/}
      - name: Get last successful commit
        uses: nrwl/last-successful-commit-action@v1
        id: last_successful_commit
        with:
          branch: ${{ steps.get_branch_name.outputs.short_ref }}
          workflow_id: release-ci.yml
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Lint
        run: npm run affected:lint -- --base=${{ steps.last_successful_commit.outputs.commit_hash }}
      - name: Test
        run: npm run affected:test -- --base=${{ steps.last_successful_commit.outputs.commit_hash }}
      - name: Build
        run: npm run affected:build -- --base=${{ steps.last_successful_commit.outputs.commit_hash }}
      - name: Build Storybooks
        run: |
          npm run build:angular-storybook
          npm run build:core-storybook
          npm run build:angular-storybook
          npm run build:angular-material-storybook
          npm run build:vue-storybook
          npm run build:react-storybook
          cp nginx.conf dist/storybook
      - name: Oc login
        uses: redhat-actions/oc-login@v1
        with:
          # URL to your OpenShift cluster.
          # Refer to Step 2.
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
          # Credentials, if desired instead of token.
          # Username and password override token if they are set.
          openshift_username: ${{ secrets.OPENSHIFT_USER }}
          openshift_password: ${{ secrets.OPENSHIFT_PASSWORD }}

          # Disables SSL cert checking. Use this if you don't have the certificate authority data.
          insecure_skip_tls_verify: true
          # This method is more secure, if the certificate from Step 4 is available.
          # certificate_authority_data: ${{ secrets.CA_DATA }}

          # Optional - this sets your Kubernetes context's current namespace after logging in.
          namespace: ui-components-dev
      - name: Start Build
        run: oc start-build ui-components --from-dir dist/storybook --follow
      # - name: Release
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      #   run: npx nx affected --target release --base=${{ steps.last_successful_commit.outputs.commit_hash }}

  deployDev:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04
    needs: build
    environment:
      name: Dev
    steps:
      - name: Oc login
        uses: redhat-actions/oc-login@v1
        with:
          # URL to your OpenShift cluster.
          # Refer to Step 2.
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
          # Credentials, if desired instead of token.
          # Username and password override token if they are set.
          openshift_username: ${{ secrets.OPENSHIFT_USER }}
          openshift_password: ${{ secrets.OPENSHIFT_PASSWORD }}

          # Disables SSL cert checking. Use this if you don't have the certificate authority data.
          insecure_skip_tls_verify: true
          # This method is more secure, if the certificate from Step 4 is available.
          # certificate_authority_data: ${{ secrets.CA_DATA }}

          # Optional - this sets your Kubernetes context's current namespace after logging in.
          namespace: ui-components-dev
      - name: Tag Dev
        run: oc tag ui-components:latest ui-components:dev
      - name: Deploy Dev
        run: |
          oc project ui-components-dev
          oc rollout latest dc/ui-components

  deployTest:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04
    needs: deployDev
    environment:
      name: Test
    steps:
      - name: Oc login
        uses: redhat-actions/oc-login@v1
        with:
          # URL to your OpenShift cluster.
          # Refer to Step 2.
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
          # Credentials, if desired instead of token.
          # Username and password override token if they are set.
          openshift_username: ${{ secrets.OPENSHIFT_USER }}
          openshift_password: ${{ secrets.OPENSHIFT_PASSWORD }}

          # Disables SSL cert checking. Use this if you don't have the certificate authority data.
          insecure_skip_tls_verify: true
          # This method is more secure, if the certificate from Step 4 is available.
          # certificate_authority_data: ${{ secrets.CA_DATA }}

          # Optional - this sets your Kubernetes context's current namespace after logging in.
          namespace: ui-components-dev
      - name: Tag Test
        run: oc tag ui-components:dev ui-components:test
      - name: Deploy Test
        run: |
          oc project ui-components-test
          oc rollout latest dc/ui-components

  deployProd:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04
    needs: deployTest
    environment:
      name: Prod
    steps:
      - name: Oc login
        uses: redhat-actions/oc-login@v1
        with:
          # URL to your OpenShift cluster.
          # Refer to Step 2.
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
          # Credentials, if desired instead of token.
          # Username and password override token if they are set.
          openshift_username: ${{ secrets.OPENSHIFT_USER }}
          openshift_password: ${{ secrets.OPENSHIFT_PASSWORD }}

          # Disables SSL cert checking. Use this if you don't have the certificate authority data.
          insecure_skip_tls_verify: true
          # This method is more secure, if the certificate from Step 4 is available.
          # certificate_authority_data: ${{ secrets.CA_DATA }}

          # Optional - this sets your Kubernetes context's current namespace after logging in.
          namespace: ui-components-dev
      - name: Tag Prod
        run: oc tag ui-components:test ui-components:prod
      - name: Deploy Prod
        run: |
          oc project ui-components-prod
          oc rollout latest dc/ui-components
